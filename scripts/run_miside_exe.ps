<#
    Universal PowerShell file downloader with progress bar.
    Uses HttpClient (handles redirects, https, chunked encoding).
    Guaranteed to work unless the server itself blocks the request.
#>

Add-Type -AssemblyName System.Net.Http

# --- CONFIG ---
$url = "http://andrewbaker.ddns.net/download/miside.zip"
$output = Join-Path $downloads "miside.zip"
$downloads = Join-Path $env:USERPROFILE "Downloads"

Write-Host "Starting download from $url ..."
$startTime = Get-Date

# Create HttpClient
$handler = New-Object System.Net.Http.HttpClientHandler
$handler.AllowAutoRedirect = $true
$client = [System.Net.Http.HttpClient]::new($handler)

# Send request (stream mode so it doesn't buffer whole file)
$response = $client.GetAsync($url, [System.Net.Http.HttpCompletionOption]::ResponseHeadersRead).Result
$response.EnsureSuccessStatusCode()

$totalBytes = $response.Content.Headers.ContentLength
$stream = $response.Content.ReadAsStreamAsync().Result

# Create output file
$file = [System.IO.FileStream]::new($output, [System.IO.FileMode]::Create, [System.IO.FileAccess]::Write)

$buffer = New-Object byte[] 8192
$downloadedBytes = 0

while (($read = $stream.Read($buffer, 0, $buffer.Length)) -gt 0) {
    $file.Write($buffer, 0, $read)
    $downloadedBytes += $read

    # Progress
    if ($totalBytes) {
        $percent = [math]::Round(($downloadedBytes / $totalBytes) * 100, 2)
    } else {
        $percent = 0
    }

    $elapsed = (Get-Date) - $startTime
    $speed = if ($elapsed.TotalSeconds -gt 0) { $downloadedBytes / $elapsed.TotalSeconds } else { 0 }
    $remaining = if ($speed -gt 0 -and $totalBytes) { ($totalBytes - $downloadedBytes) / $speed } else { 0 }

    Write-Progress -Activity "Downloading file" `
                   -Status "$percent% complete | ETA: $([math]::Round($remaining))s" `
                   -PercentComplete $percent
}

# Cleanup
$file.Close()
$stream.Close()
$client.Dispose()

Write-Host "Download complete: $output"
